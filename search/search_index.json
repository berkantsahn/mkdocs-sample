{"config":{"lang":["tr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MkDocs Dok\u00fcman\u0131na Ho\u015fgeldiniz","text":"<p>Bu proje MkDocs dok\u00fcman y\u00f6netim yap\u0131s\u0131 ile test ama\u00e7l\u0131 olu\u015fturulmu\u015ftur. Bu projeyi olu\u015fturmaktaki ama\u00e7 MkDocs sistemini test etmektir.</p>"},{"location":"mkdocs/","title":"MkDocs Nedir? / Nas\u0131l Kurulur?","text":""},{"location":"mkdocs/#mkdocs-nedir","title":"MkDocs Nedir?","text":"<p>MkDocs Markdown(md) format\u0131nda dok\u00fcmanlar haz\u0131rlamam\u0131z\u0131 sa\u011flayan bir dok\u00fcman sistemidir. MkDocs yaz\u0131lan dok\u00fcmanlar\u0131 statik bir web sitesi olarak export eder. Bunlarla beraber \u00e7e\u015fitli tema ve eklentilere sahiptir.</p> <p>MkDocs Python ile geli\u015ftirilmi\u015f bir ara\u00e7t\u0131r ve kullan\u0131m\u0131 i\u00e7in python kurulumuna ihtiya\u00e7 duyulmaktad\u0131r.</p>"},{"location":"mkdocs/#mkdocs-kurulumu","title":"MkDocs Kurulumu","text":"<p>MKDocs kurulumu i\u00e7in \u00f6ncelikle bilgisayar python kurulmal\u0131d\u0131r. Python\u2019u bilgisayara kurmak i\u00e7in Python \u0130ndir ba\u011flant\u0131s\u0131ndan Python\u2019u bilgisayara kurabilirsiniz.</p> <p>Python\u2019u bilgisayara indirdikten sonra kurulumu a\u00e7t\u0131\u011f\u0131m\u0131zda gelen pencerede altta bulunan Use admin privileges when installing py.exe ve Add python.exe to PATH se\u00e7eneklerini i\u015faretleyip Install Now se\u00e7ene\u011fini se\u00e7iyoruz.</p> <p></p> <p>Kurulum bittikten sonra kar\u015f\u0131m\u0131za gelen pencerede altta bulunan Disable path length limit se\u00e7ene\u011fini se\u00e7erek kurulumu sonland\u0131r\u0131yoruz.</p> <p></p> <p>Ard\u0131ndan klavyede Space (Bo\u015fluk) tu\u015funun solunda bulunan Windows tu\u015fu ve R tu\u015funa basarak \u00e7al\u0131\u015ft\u0131r penceresini a\u00e7\u0131yoruz ve a\u00e7\u0131lan pencereye cmd yaz\u0131p tamam butonuna t\u0131kl\u0131yoruz ve komut istemcisi penceresine ula\u015f\u0131yoruz.</p> <p></p> <p>Kar\u015f\u0131m\u0131za gelen komut istemcisi penceresine  <pre><code>python -m pip install --upgrade pip\n</code></pre> yaz\u0131p enter tu\u015funa basarak python ile beraber kurulan pip paket y\u00f6netim sistemini son s\u00fcr\u00fcme g\u00fcncelliyoruz.</p> <p></p> <p>Pip g\u00fcncellendikten sonra mkdocs\u2019u indirebiliriz. MkDocs\u2019u indirmek i\u00e7in yine komut istemcisi penceresine  <pre><code>pip install mkdocs\n</code></pre> yazarak enter tu\u015funa bas\u0131yoruz ve mkdocs\u2019u bilgisayar\u0131m\u0131za indiriyoruz.</p> <p></p> <p>MkDocs bilgisayar\u0131m\u0131za kurulduktan sonra dok\u00fcman\u0131 olu\u015fturmak istedi\u011fimiz yerde bir klas\u00f6r olu\u015fturarak klas\u00f6r\u00fcn i\u00e7erisine giriyoruz. Klas\u00f6r\u00fcn i\u00e7erisine girdikten sonra klas\u00f6r\u00fcn arama \u00e7ubu\u011funa bir kez t\u0131kl\u0131yoruz ve cmd yaz\u0131p enter tu\u015funa bas\u0131yoruz.</p> <p></p> <p>Bu i\u015flemi ger\u00e7ekle\u015ftirdikten sonra klas\u00f6r yolunu i\u00e7eren bir komut istemcisi penceresi a\u00e7m\u0131\u015f olaca\u011f\u0131z ve MkDocs dosyalar\u0131m\u0131z\u0131 bu klas\u00f6r i\u00e7erisine olu\u015fturaca\u011f\u0131z.</p> <p>A\u00e7\u0131lan komut istemcisi penceresine  <pre><code>python -m mkdocs new {projeAdi}\n</code></pre> yaz\u0131p enter tu\u015funa basarak mkdocs projemizi olu\u015fturabiliriz.</p> <p></p> <p>Olu\u015fturulan dosya ve dosya i\u00e7eri\u011fi a\u015fa\u011f\u0131daki gibi olacakt\u0131r.</p> <p></p> <p></p> <p>Olu\u015fturdu\u011fumuz projeyi Visual Studio Code edit\u00f6r\u00fcn\u00fc kullanarak d\u00fczenleyebiliriz. Docs isimli klas\u00f6r\u00fcm\u00fcz\u00fcn i\u00e7erisinde proje i\u00e7erisinde bulunacak dok\u00fcmanlar\u0131n md format\u0131nda yaz\u0131lm\u0131\u015f hali bulunmal\u0131d\u0131r. YML dosyas\u0131 ise kullan\u0131lan tema, eklenti, dil ayar\u0131, karanl\u0131k &amp; ayd\u0131nl\u0131k mod gibi dok\u00fcman sistemi i\u00e7erisinde yap\u0131lacak ayarlar\u0131n yap\u0131ld\u0131\u011f\u0131 dosyad\u0131r.</p> <p>Bir tema indirmek i\u00e7in (\u00f6rne\u011fin material temas\u0131) Visual Studio Code i\u00e7erisinde projeyi a\u00e7t\u0131ktan sonra terminal penceresine  <pre><code>pip install mkdocs-material\n</code></pre> yaz\u0131p enter tu\u015funa basarak temay\u0131 indirebiliriz.</p> <p></p> <p>Y\u00fcklenebilecek baz\u0131 temalar: <pre><code>pip install mkdocs-bootstrap\n</code></pre> <pre><code>pip install mkdocs-windmill\n</code></pre> <pre><code>pip install mkdocs-cinder\n</code></pre> <pre><code>pip install mkdocs-readthedocs\n</code></pre></p> <p>Haz\u0131rlanan \u00f6rnek yml dosyas\u0131 ise a\u015fa\u011f\u0131daki gibidir. Bu YML dosyas\u0131nda material temas\u0131 kullan\u0131lm\u0131\u015f ve dil ayar\u0131 t\u00fcrk\u00e7e olarak ayarlanm\u0131\u015ft\u0131r. Ayr\u0131ca karanl\u0131k ve ayd\u0131nl\u0131k mod i\u00e7in toggle butonu eklenmi\u015ftir. </p> <p></p>"},{"location":"string-encryption/","title":"String Encryption","text":"<p>\u0130lk olarak Volo.Abp.Security paketinde bulunan StringEncryption mod\u00fcl\u00fc hatal\u0131 oldu\u011fu i\u00e7in bu mod\u00fcl\u00fcn kodlar\u0131n\u0131 ABP GitHup repository\u2019 sinden kodlar\u0131n\u0131 al\u0131p kendimiz olu\u015fturuyoruz.</p> <p>Bunun i\u00e7in Domain katman\u0131nda AbpStringEncryptionOptions, IStringEncryptionService ve StringEncryptionService ad\u0131nda \u00fc\u00e7 tane s\u0131n\u0131f olu\u015fturuyoruz.</p>"},{"location":"string-encryption/#abpstringencryptionoptions","title":"AbpStringEncryptionOptions","text":"<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Serender.Definitions.CustomerMasters\n{\n    public class AbpStringEncryptionOptions\n    {\n        public int Keysize { get; set; }\n        public string DefaultPassPhrase { get; set; }\n        public byte[] InitVectorBytes { get; set; }\n        public byte[] DefaultSalt { get; set; }\n\n        public AbpStringEncryptionOptions()\n        {\n            Keysize = 256;\n            DefaultPassPhrase = \"gsKnGZ041HLL4IM8\";\n            InitVectorBytes = Encoding.ASCII.GetBytes(\"jkE49230Tf093b42\");\n            DefaultSalt = Encoding.ASCII.GetBytes(\"hgt!16kl\");\n        }\n    }\n}\n</code></pre>"},{"location":"string-encryption/#istringencryptionservice","title":"IStringEncryptionService","text":"<pre><code>using JetBrains.Annotations;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Serender.Definitions.CustomerMasters\n{\n    public interface IStringEncryptionService\n    {\n        [CanBeNull]\n        string Encrypt([CanBeNull] string plainText, string passPhrase = null, byte[] salt = null);\n\n        [CanBeNull]\n        string Decrypt([CanBeNull] string cipherText, string passPhrase = null, byte[] salt = null);\n    }\n}\n</code></pre>"},{"location":"string-encryption/#stringencryptionservice","title":"StringEncryptionService","text":"<pre><code>using Microsoft.Extensions.Options;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\nusing Volo.Abp.DependencyInjection;\n\nnamespace Serender.Definitions.CustomerMasters\n{\n    public class StringEncryptionService : IStringEncryptionService, ITransientDependency\n    {\n        protected AbpStringEncryptionOptions Options { get; }\n\n        public StringEncryptionService(IOptions&lt;AbpStringEncryptionOptions&gt; options)\n        {\n            Options = options.Value;\n        }\n\n        public virtual string Encrypt(string plainText, string passPhrase = null, byte[] salt = null)\n        {\n            if (plainText == null)\n            {\n                return null;\n            }\n\n            if (passPhrase == null)\n            {\n                passPhrase = Options.DefaultPassPhrase;\n            }\n\n            if (salt == null)\n            {\n                salt = Options.DefaultSalt;\n            }\n\n            var plainTextBytes = Encoding.UTF8.GetBytes(plainText);\n            using (var password = new Rfc2898DeriveBytes(passPhrase, salt))\n            {\n                var keyBytes = password.GetBytes(Options.Keysize / 8);\n                using (var symmetricKey = Aes.Create())\n                {\n                    symmetricKey.Mode = CipherMode.CBC;\n               using (var encryptor = symmetricKey.CreateEncryptor(keyBytes, Options.InitVectorBytes))\n                    {\n                        using (var memoryStream = new MemoryStream())\n                        {\n          using (var cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))\n                            {\n                                cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);\n                                cryptoStream.FlushFinalBlock();\n                                var cipherTextBytes = memoryStream.ToArray();\n                                return Convert.ToBase64String(cipherTextBytes);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        public virtual string Decrypt(string cipherText, string passPhrase = null, byte[] salt = null)\n        {\n            if (string.IsNullOrEmpty(cipherText))\n            {\n                return null;\n            }\n\n            if (passPhrase == null)\n            {\n                passPhrase = Options.DefaultPassPhrase;\n            }\n\n            if (salt == null)\n            {\n                salt = Options.DefaultSalt;\n            }\n\n            var cipherTextBytes = Convert.FromBase64String(cipherText);\n            using (var password = new Rfc2898DeriveBytes(passPhrase, salt))\n            {\n                var keyBytes = password.GetBytes(Options.Keysize / 8);\n                using (var symmetricKey = Aes.Create())\n                {\n                    symmetricKey.Mode = CipherMode.CBC;\n               using (var decryptor = symmetricKey.CreateDecryptor(keyBytes, Options.InitVectorBytes))\n                    {\n                        using (var memoryStream = new MemoryStream(cipherTextBytes))\n                        {\n           using (var cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))\n                            {\n                                var plainTextBytes = new byte[cipherTextBytes.Length];\n                                var totalReadCount = 0;\n                                while (totalReadCount &lt; cipherTextBytes.Length)\n                                {\n                                    var buffer = new byte[cipherTextBytes.Length];\n                                    var readCount = cryptoStream.Read(buffer, 0, buffer.Length);\n                                    if (readCount == 0)\n                                    {\n                                        break;\n                                    }\n\n                                    for (var i = 0; i &lt; readCount; i++)\n                                    {\n                                        plainTextBytes[i + totalReadCount] = buffer[i];\n                                    }\n\n                                    totalReadCount += readCount;\n                                }\n\n                                return Encoding.UTF8.GetString(plainTextBytes, 0, totalReadCount);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>\u00b7 StringEncryption mod\u00fcl\u00fc tamamlad\u0131ktan sonra Domain.Shared katman\u0131nda Attributes isminde bir klas\u00f6r olu\u015fturuyoruz.</li> <li>\u00b7 Attributes klas\u00f6r\u00fc i\u00e7inde EncryptAttribute isminde bir s\u0131n\u0131f olu\u015fturuyoruz.</li> </ul>"},{"location":"string-encryption/#encryptattribute","title":"EncryptAttribute","text":"<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Serender.Definitions.Attributes\n{\n    public class EncryptAttribute : System.Attribute\n    {\n\n        public EncryptAttribute()\n        {\n\n        }\n    }\n}\n</code></pre> <ul> <li>CustomerMaster s\u0131n\u0131f\u0131nda \u015fifreleme i\u015flemi yapmak istedi\u011fimiz field i\u00e7in bu attribute\u2019 u kullan\u0131yoruz.</li> </ul> <pre><code>[Encrypt]\npublic string Adress { get; set; }\n</code></pre> <ul> <li> <p>\u00b7 Otomatik \u015fifreleme i\u015flemi i\u00e7in Application.Contracts katman\u0131nda CustomerMaster klas\u00f6r\u00fcne CustomerMasterEncryptDto isminde yeni bir DTO ekliyoruz.</p> </li> <li> <p>\u00b7 Domain katman\u0131ndaki CustomerMaster.cs \u2018de oldu\u011fu gibi \u015fifrelemek istedi\u011fimiz field i\u00e7in EncryptAttribute\u2019 u kullan\u0131yoruz.</p> </li> </ul> <pre><code>using Serender.Definitions.Attributes;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Volo.Abp.Application.Dtos;\n\nnamespace Serender.Definitions.CustomerMasters\n{\n    public class CustomerMasterEncryptDto : EntityDto&lt;Guid&gt;\n    {\n        public Guid CustomerTypeId { get; set; }\n        public string Code { get; set; }\n        public string Name { get; set; }\n        public Guid CustomerGroupId { get; set; }\n        [Encrypt]\n        public string Adress { get; set; }\n        public string PostCode { get; set; }\n        public string Telephone { get; set; }\n        public string Mail { get; set; }\n        public string CommercialName { get; set; }\n        public string TaxOffice { get; set; }\n        public string TaxidNumber { get; set; }\n        public Guid ChartofAccountsId { get; set; }\n    }\n}\n</code></pre> <ul> <li>\u00b7 Create metodunda otomatik encryption i\u015flemini kullanabilmek i\u00e7in yeni bir CustomerMasterEnctyptDtoMapper isminde yeni bir Mapper s\u0131n\u0131f\u0131 olu\u015fturuyoruz.</li> <li>\u00b7 Get ve GetList metodunda otomatik decryption i\u015flemini kullanabilmek i\u00e7in yeni bir CustomCustomerMasterMapper isminde yeni bir Mapper s\u0131n\u0131f\u0131 olu\u015fturuyoruz.</li> <li>\u00b7 Update metodunda otomatik encryption i\u015flemini kullanabilmek i\u00e7in yeni bir CustomerMasterUpdateDtoMapper isminde yeni bir Mapper s\u0131n\u0131f\u0131 olu\u015fturuyoruz.</li> <li>\u00b7 Bu Mapper s\u0131n\u0131flar\u0131nda System.Reflection k\u00fct\u00fcphanesini kullanarak propertyleri al\u0131p source\u2019tan destination\u2019a de\u011ferleri ta\u015f\u0131yoruz.</li> </ul>"},{"location":"string-encryption/#customermasterenctyptdtomapper","title":"CustomerMasterEnctyptDtoMapper","text":"<pre><code>using Serender.Definitions.Attributes;\nusing Serender.Definitions.CustomerMasters;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Volo.Abp.DependencyInjection;\nusing Volo.Abp.ObjectMapping;\n\nnamespace Serender.Definitions\n{\n    public class CustomerMasterEnctyptDtoMapper : IObjectMapper&lt;CreateCustomerMasterDto, CustomerMasterEncryptDto&gt;, ITransientDependency\n    {\n        protected IStringEncryptionService _stringEncryptionService { get; }\n\n        public CustomerMasterEnctyptDtoMapper(IStringEncryptionService stringEncryptionService)\n        {\n            _stringEncryptionService = stringEncryptionService;\n        }\n        public CustomerMasterEncryptDto Map(CreateCustomerMasterDto source)\n        {\n            var deneme = Map(source, new CustomerMasterEncryptDto());\n            return deneme;\n        }\n\n        public CustomerMasterEncryptDto Map(CreateCustomerMasterDto source, CustomerMasterEncryptDto destination)\n        {\n\n            destination.GetType().GetProperties().ToList().ForEach(dp =&gt;\n            {\n                if (source.GetType().GetProperties().Any(x =&gt; x.Name == dp.Name))\n                {\n                    if (destination.GetType().GetProperty(dp.Name).GetCustomAttributes(true).Where(sp =&gt; sp.GetType() == typeof(EncryptAttribute)).Any())\n                    {\n                        try\n                        {\n                            dp.SetValue(destination, _stringEncryptionService.Encrypt(source.GetType().GetProperty(dp.Name).GetValue(source).ToString()));\n                        }\n                        catch\n                        {\n                            dp.SetValue(destination, source.GetType().GetProperty(dp.Name).GetValue(source));\n                        }\n                    }\n                    else\n                    {\n                        dp.SetValue(destination, source.GetType().GetProperty(dp.Name).GetValue(source));\n                    }\n                }\n            }\n            );\n            return destination;\n        }\n    }\n}\n</code></pre>"},{"location":"string-encryption/#customcustomermastermapper","title":"CustomCustomerMasterMapper","text":"<pre><code>using Serender.Definitions.Attributes;\nusing Serender.Definitions.CustomerMasters;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Volo.Abp.DependencyInjection;\nusing Volo.Abp.ObjectMapping;\n\nnamespace Serender.Definitions\n{\n    public class CustomCustomerMasterMapper : IObjectMapper&lt;CustomerMaster, CustomerMasterDto&gt;, ITransientDependency\n    {\n        protected IStringEncryptionService _stringEncryptionService { get; }\n\n        public CustomCustomerMasterMapper(IStringEncryptionService stringEncryptionService)\n        {\n\n            _stringEncryptionService = stringEncryptionService;\n        }\n\n        public CustomerMasterDto Map(CustomerMaster source)\n        {\n            var deneme = Map(source, new CustomerMasterDto());\n            return deneme;\n        }\n\n        public CustomerMasterDto Map(CustomerMaster source, CustomerMasterDto destination)\n        {\n            destination.GetType().GetProperties().ToList().ForEach(dp =&gt;\n            {\n                if (source.GetType().GetProperty(dp.Name).GetCustomAttributes(true).Where(sp =&gt; sp.GetType() == typeof(EncryptAttribute)).Count() &gt; 0)\n                {\n                    try\n                    {\n                        dp.SetValue(destination, _stringEncryptionService.Decrypt(source.GetType().GetProperty(dp.Name).GetValue(source).ToString()));\n                    }\n                    catch\n                    {\n                        dp.SetValue(destination, source.GetType().GetProperty(dp.Name).GetValue(source));\n                    }\n                }\n                else\n                {\n                    dp.SetValue(destination, source.GetType().GetProperty(dp.Name).GetValue(source));\n                }\n            }\n            );\n\n            return destination;\n\n        }\n    }\n}\n</code></pre>"},{"location":"string-encryption/#customermasterupdatedtomapper","title":"CustomerMasterUpdateDtoMapper","text":"<pre><code>using AutoMapper;\nusing Serender.Definitions.CustomerMasters;\nusing Volo.Abp.DependencyInjection;\nusing Volo.Abp.ObjectMapping;\nusing System.Linq;\nusing System.Reflection;\nusing System;\nusing System.Collections.Generic;\nusing Serender.Definitions.Attributes;\n\nnamespace Serender.Definitions\n{\n    public class CustomerMasterUpdateDtoMapper : IObjectMapper&lt;UpdateCustomerMasterDto, CustomerMasterEncryptDto&gt;, ITransientDependency\n    {\n        protected IStringEncryptionService _stringEncryptionService { get; }\n\n        public CustomerMasterUpdateDtoMapper(IStringEncryptionService stringEncryptionService)\n        {\n            _stringEncryptionService = stringEncryptionService;\n        }\n        public CustomerMasterEncryptDto Map(UpdateCustomerMasterDto source)\n        {\n            var deneme = Map(source, new CustomerMasterEncryptDto());\n            return deneme;\n        }\n\n        public CustomerMasterEncryptDto Map(UpdateCustomerMasterDto source, CustomerMasterEncryptDto destination)\n        {\n\n            destination.GetType().GetProperties().ToList().ForEach(dp =&gt;\n            {\n                if (source.GetType().GetProperties().Any(x =&gt; x.Name == dp.Name))\n                {\n                    if (destination.GetType().GetProperty(dp.Name).GetCustomAttributes(true).Where(sp =&gt; sp.GetType() == typeof(EncryptAttribute)).Any())\n                    {\n                        try\n                        {\n                            dp.SetValue(destination, _stringEncryptionService.Encrypt(source.GetType().GetProperty(dp.Name).GetValue(source).ToString()));\n                        }\n                        catch\n                        {\n                            dp.SetValue(destination, source.GetType().GetProperty(dp.Name).GetValue(source));\n                        }\n                    }\n                    else\n                    {\n                        dp.SetValue(destination, source.GetType().GetProperty(dp.Name).GetValue(source));\n                    }\n                }\n            }\n            );\n            return destination;\n        }\n    }\n}\n</code></pre>"},{"location":"string-encryption/#yaplmas-gereken-degisiklikler","title":"Yap\u0131lmas\u0131 Gereken De\u011fi\u015fiklikler","text":"<ul> <li>Application katman\u0131nda bulunan CustomerMasterAppService s\u0131n\u0131f\u0131 i\u00e7erine ilk olarak StringEncryption ve ObjectMapper interface\u2019 leri ekliyoruz.</li> </ul> <pre><code>public class CustomerMasterAppService : DefinitionsAppService, ICustomerMasterAppService\n    { \n  //\u2026\n  //\u2026\n        private readonly IObjectMapper&lt;DefinitionsApplicationModule&gt; _objectMapper;\n        protected IStringEncryptionService _stringEncryptionService { get; }\n    public CustomerMasterAppService(\n            IStringEncryptionService stringEncryptionService,\n            IObjectMapper&lt;DefinitionsApplicationModule&gt; objectMapper)\n        {\n             //\u2026\n//\u2026\n            _stringEncryptionService = stringEncryptionService;\n            _objectMapper = objectMapper;\n        }\n}\n</code></pre>"},{"location":"string-encryption/#createasync-metodu","title":"CreateAsync Metodu","text":"<p>\u00b7 Olu\u015fturmu\u015f oldu\u011fumuz Mapper s\u0131n\u0131f\u0131na kullan\u0131c\u0131dan gelen input de\u011ferlerini g\u00f6nderiyoruz.</p> <p>\u00b7 Mapper \u2018 dan d\u00f6nen de\u011ferleri EnctyptDto isminde bir de\u011fere at\u0131yoruz.</p> <p>\u00b7 CreateAsync i\u00e7in gerekli olan input de\u011ferlerini EnctyptDto de\u011fi\u015fkeninden \u00e7ekiyoruz.</p>"},{"location":"string-encryption/#getasync-ve-getlistasync-metodu","title":"GetAsync ve GetListAsync metodu","text":"<ul> <li>Bu iki metot da yapmam\u0131z gereken de\u011fi\u015fiklik sadece return i\u015fleminde kendi olu\u015fturdu\u011fumuz mapper \u2018 \u0131 kullanmak.</li> </ul> <pre><code>public async Task&lt;CustomerMasterDto&gt; GetAsync(Guid id)\n        {\n            var queryable = await _customerMasterRepository.GetQueryableAsync();\n            var query = from customerMaster in queryable\n                        join customerType in await _customerTypeRepository.GetQueryableAsync() on customerMaster.CustomerTypeId equals customerType.Id\n                        join customerGroup in await _customerGroupRepository.GetQueryableAsync() on customerMaster.CustomerGroupId equals customerGroup.Id\n                        join accountChart in await _accountChartRepository.GetQueryableAsync() on customerMaster.ChartofAccountsId equals accountChart.Id\n                        where customerMaster.Id == id\n                        select new { customerMaster, customerType, customerGroup, accountChart };\n            var queryResult = await AsyncExecuter.FirstOrDefaultAsync(query);\n            if (queryResult == null)\n            {\n                throw new EntityNotFoundException(typeof(CustomerMaster), id);\n            }\n       // return ObjectMapper.Map&lt;CustomerMaster, CustomerMasterDto&gt;(queryResult.customerMaster);\n\n            return _objectMapper.Map&lt;CustomerMaster, CustomerMasterDto&gt;(queryResult.customerMaster); \n        }\npublic async Task&lt;PagedResultDto&lt;CustomerMasterDto&gt;&gt; GetListAsync(GetCustomerMasterListDto input)\n        {\n            var queryable = await _customerMasterRepository.GetQueryableAsync();\n\n            var query = from customerMaster in queryable\n                        join customerType in await _customerTypeRepository.GetQueryableAsync() on customerMaster.CustomerTypeId equals customerType.Id\n                        join customerGroup in await _customerGroupRepository.GetQueryableAsync() on customerMaster.CustomerGroupId equals customerGroup.Id\n                        join accountChart in await _accountChartRepository.GetQueryableAsync() on customerMaster.ChartofAccountsId equals accountChart.Id\n                        select new { customerMaster, customerType, customerGroup, accountChart };\n\n            query = query\n                .OrderBy(NormalizeSorting(input.Sorting))\n                .Skip(input.SkipCount)\n                .Take(input.MaxResultCount);\n\n            var queryResult = await AsyncExecuter.ToListAsync(query);\n\n            var customerMasterDtos = queryResult.Select(x =&gt;\n            {\n        // return ObjectMapper.Map&lt;CustomerMaster, CustomerMasterDto&gt;(x.customerMaster);\n             return _objectMapper.Map&lt;CustomerMaster, CustomerMasterDto&gt;(x.customerMaster);\n            }).ToList();\n\n            var totalCount = await _customerMasterRepository.GetCountAsync();\n\n            return new PagedResultDto&lt;CustomerMasterDto&gt;(\n                totalCount,\n                customerMasterDtos\n            );\n        }\n</code></pre>"},{"location":"string-encryption/#updateasync-metodu","title":"UpdateAsync metodu","text":"<p>\u00b7 Bir return\u2019 e ihtiyac\u0131m\u0131z oldu\u011fu i\u00e7in UpdateAsync metodunu Task yap\u0131s\u0131na d\u00f6n\u00fc\u015ft\u00fcr\u00fcyoruz. <p>\u00b7 Ayn\u0131 i\u015flemi Application.Contracts katman\u0131nda bulunan ICustomerMasterAppService s\u0131n\u0131f\u0131nda ve HttpApi katman\u0131nda bulunan CustomerMasterController s\u0131n\u0131f\u0131nda da ger\u00e7ekle\u015ftiriyoruz.</p> <p>\u00b7 CreateAsync metodunda yapt\u0131\u011f\u0131m\u0131z gibi kullan\u0131c\u0131dan gelen verileri olu\u015fturdu\u011fumuz Mapper\u2019 a g\u00f6nderiyoruz ve bir de\u011fi\u015fkene at\u0131yoruz.</p> <p>\u00b7 Update i\u015flemi i\u00e7in gerekli olan verileri kullan\u0131c\u0131dan gelen input yerine mapper i\u015fleminden geri d\u00f6nen de\u011ferler ile ger\u00e7ekle\u015ftiriyoruz.</p> <pre><code>public async Task &lt;CustomerMasterDto&gt; UpdateAsync(Guid id, UpdateCustomerMasterDto input)\n        {\n            var customerMaster = await _customerMasterRepository.GetAsync(id);\n            var EnctyptDto = _objectMapper.Map&lt;UpdateCustomerMasterDto, CustomerMasterEncryptDto&gt;(input);\n            if (customerMaster.Code != EnctyptDto.Code || customerMaster.Name != EnctyptDto.Name || customerMaster.CustomerTypeId != EnctyptDto.CustomerTypeId\n                || customerMaster.CustomerGroupId != EnctyptDto.CustomerGroupId || customerMaster.Adress != EnctyptDto.Adress || customerMaster.PostCode != EnctyptDto.PostCode\n                || customerMaster.Telephone != EnctyptDto.Telephone || customerMaster.Mail != EnctyptDto.Mail || customerMaster.CommercialName != EnctyptDto.CommercialName\n                || customerMaster.TaxOffice != EnctyptDto.TaxOffice || customerMaster.TaxidNumber != EnctyptDto.TaxidNumber \n                || customerMaster.ChartofAccountsId != EnctyptDto.ChartofAccountsId)\n            {\n                await _customerMasterManager.ChangeCodeAsync(customerMaster, EnctyptDto.Code, EnctyptDto.Name, EnctyptDto.CustomerTypeId, EnctyptDto.CustomerGroupId,\n                    EnctyptDto.Adress, EnctyptDto.PostCode, EnctyptDto.Telephone, EnctyptDto.Mail, EnctyptDto.CommercialName, EnctyptDto.TaxOffice, EnctyptDto.TaxidNumber,\n                    EnctyptDto.ChartofAccountsId);\n            }\n\n            await _customerMasterRepository.UpdateAsync(customerMaster);\n            return _objectMapper.Map&lt;CustomerMaster, CustomerMasterDto&gt;(customerMaster);\n        }\n</code></pre> <pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nnamespace Serender.Definitions.CustomerMasters\n{\npublic class AbpStringEncryptionOptions\n{\npublic int Keysize { get; set; }\npublic string DefaultPassPhrase { get; set; }\npublic byte[] InitVectorBytes { get; set; }\npublic byte[] DefaultSalt { get; set; }\npublic AbpStringEncryptionOptions()\n{\nKeysize = 256;\nDefaultPassPhrase = \"gsKnGZ041HLL4IM8\";\nInitVectorBytes = Encoding.ASCII.GetBytes(\"jkE49230Tf093b42\");\nDefaultSalt = Encoding.ASCII.GetBytes(\"hgt!16kl\");\n}\n}\n}\n</code></pre>"},{"location":"test-sayfasi/","title":"Test Sayfas\u0131","text":"<p>Link y\u00f6nlendirme deneme: Google.</p>"},{"location":"test-sayfasi/#baslk-1","title":"Ba\u015fl\u0131k 1","text":"<ul> <li>deneme1</li> <li>deneme2</li> <li>deneme3</li> </ul> <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"}]}